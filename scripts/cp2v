#!/usr/bin/python

'''
@author: Hanpu Liang
@date: 2020/11/07
@description: convert the structural file from the PWmat format atom.config to the VASP format POSCAR. Example: $ cp2v atom.config
'''


import numpy as np
import sys
import datetime
import os


def main():
    Open_screen()
    # read input parameter
    atom_files = get_input_information()
    # read atom.config file
    for file_name in atom_files:
        with open(file_name, 'r') as obj:
            atom_config = obj.readlines()
        systemEcho(' [DPT] - Reading {0}...'.format(file_name))
        # get all information of POSCAR
        lattice, atom_type, atom_num, title_information, position = get_atom_config_infomation(atom_config)
        # read information into atom.config
        creat_POSCAR_file(lattice, atom_type, atom_num, title_information, position, file_name)

def get_input_information():
    argv_list = sys.argv[1:]
    poscars = []
    # default parameters
    if len(argv_list) == 0:
        return ['atom.config'], None
    for i, para in enumerate(argv_list):
        if argv_list[i][0] != '-':
            poscars.append(para)
    if len(poscars) == 0:
        poscars.append('atom.config')
    return poscars

def get_atom_config_infomation(atom_config):
    title_information = atom_config[0]
    total_atom_num = int(title_information.split()[0])
    lattice = np.array([[float(item) for item in line.split()[0:3]] for line in atom_config[2:5]])
    # get atomic configuration and position
    position_information = np.array([[float(item) for item in line.split()] for line in atom_config[6:6+total_atom_num]])
    atom_array = position_information[:,0]
    position = position_information[:,1:4]
    atom_type_dir = {}
    atom_type, atom_num = [], []
    atom_position = []
    for i, item in enumerate(atom_array):
        if ATOM(item) not in atom_type_dir.keys():
            atom_type_dir[ATOM(item)] = [0, []]
        atom_type_dir[ATOM(item)][0] += 1
        atom_type_dir[ATOM(item)][1].append(position[i,:])
    for item in atom_type_dir:
        atom_type.append(item)
        atom_num.append(atom_type_dir[item][0])
        for p in atom_type_dir[item][1]:
            atom_position.append(p)
    atom_position = np.array(atom_position)
    atom_type = [' {0} '.format(item)for item in atom_type]
    atom_num = [' {0} '.format(item)for item in atom_num]
    return lattice, atom_type, atom_num, title_information, atom_position

def creat_POSCAR_file(lattice, atom_type, atom_num, title_information, position, file_name):
    lattice_vasp = '\n'.join([' '.join([' {0:20.15f} '.format(item) for item in line])for line in lattice])
    position_vasp = '\n'.join([' '.join([' {0:20.15f} '.format(item) for item in line])for line in position])
    atom_type_vasp = '  '.join(atom_type)
    atom_num_vasp = '  '.join(atom_num)
    poscar = '''{0}1.00
{1}
   {2}
   {3}
Direct
{4}'''.format(title_information, lattice_vasp, atom_type_vasp, atom_num_vasp, position_vasp)
    with open('POSCAR-{0}.vasp'.format(file_name), 'w') as obj:
        obj.write(poscar)
    systemEcho(' [DPT] - File POSCAR-{0}.vasp saved!'.format(file_name))


def ATOM(atom_number):
    atom_list = ['H', 
'He', 
'Li', 
'Be', 
'B', 
'C', 
'N', 
'O', 
'F', 
'Ne', 
'Na', 
'Mg', 
'Al', 
'Si', 
'P', 
'S', 
'Cl', 
'Ar', 
'K', 
'Ca', 
'Sc', 
'Ti', 
'V', 
'Cr', 
'Mn', 
'Fe', 
'Co', 
'Ni', 
'Cu', 
'Zn', 
'Ga', 
'Ge', 
'As', 
'Se', 
'Br', 
'Kr', 
'Rb', 
'Sr', 
'Y', 
'Zr', 
'Nb', 
'Mo', 
'Tc', 
'Ru', 
'Rh', 
'Pd', 
'Ag', 
'Cd', 
'In', 
'Sn', 
'Sb', 
'Te', 
'I', 
'Xe', 
'Cs', 
'Ba', 
'La', 
'Ce', 
'Pr', 
'Nd', 
'Pm', 
'Sm', 
'Eu', 
'Gd', 
'Tb', 
'Dy', 
'Ho', 
'Er', 
'Tm', 
'Yb', 
'Lu', 
'Hf', 
'Ta', 
'W', 
'Re', 
'Os', 
'Ir', 
'Pt', 
'Au', 
'Hg', 
'Tl', 
'Pb', 
'Bi', 
'Po', 
'At', 
'Rn', 
'Fr', 
'Ra', 
'Ac', 
'Th', 
'Pa', 
'U', 
'Np', 
'Pu', 
'Am', 
'Cm', 
'Bk', 
'Cf', 
'Es', 
'Fm', 
'Md', 
'No', 
'Lr', 
'Rf', 
'Db', 
'Sg', 
'Bh', 
'Hs', 
'Mt', 
'Ds', 
'Rg', 
'Cn']
    return atom_list[int(atom_number)-1]


'''
Log function
'''

def Open_screen():
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print('''
       *-----------------*-----*
       |  Data           |  D  |        Version : GPU-Extra
       |     Processing  |  P  |  Latest Update : 2020-11-13 
       |         Toolkit |  T  |         Author : Liang HP
       *-----------------*-----*
       |     G - P - U   |  G  |        [Suited For PWmat]
       *-----------------*-----*
              Current Time: {0}
'''.format(now_time))

def systemEcho(content):
    ''' system information print to screen'''
    print(content)
    systemLog(content)

def systemError(content):
    ''' exit program when somewhere errors'''
    content = '**ERROR** : ' + content
    print(content)
    print('Program Exits.')
    exit(0)

def systemLog(content):
    ''' output information into log file'''
    now_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    out_str = now_time + '---' + content + '\n'
    with open('./system.log', 'a') as obj:
        obj.write(out_str)

if __name__ == '__main__':
    main()
